// Generated by CoffeeScript 1.10.0
(function() {
  var ats_service;

  ats_service = {
    hljs: false,
    precodify: function(str, pre_cls, code_cls) {
      if (pre_cls == null) {
        pre_cls = "";
      }
      if (code_cls == null) {
        code_cls = "";
      }
      return "<pre class=\"" + pre_cls + "\"><code class=\"" + code_cls + "\">" + str + "</code></pre>";
    },
    api: {
      tc: "http://www.ats-lang.org/SERVER/MYCODE/atslangweb_patsopt_tcats_0_.php",
      cc: "http://www.ats-lang.org/SERVER/MYCODE/atslangweb_patsopt_ccats_0_.php",
      cjs: "http://www.ats-lang.org/SERVER/MYCODE/atslangweb_patsopt_atscc2js_0_.php",
      chtml: "http://www.ats-lang.org/SERVER/MYCODE/atslangweb_pats2xhtml_eval_0_.php"
    },
    get_code: function(id) {
      return ace.edit(id + "-editor").getValue();
    },
    fix_pre_code: function(elem) {
      var classes;
      classes = $(elem).attr("class");
      elem = $(elem).wrapAll("<pre><code></code></pre>").children().unwrap().parent().parent();
      elem.attr("class", classes);
      return elem;
    },
    use_hljs: function(elem) {
      var fn, k, mapping, v;
      elem = this.fix_pre_code(elem);
      elem.addClass("hljs").removeClass("patsyntax");
      mapping = {
        'keyword': 'hljs-keyword',
        'comment': 'hljs-comment',
        'extcode': 'hljs-meta',
        'neuexp': '',
        'staexp': 'hljs-type',
        'prfexp': 'hljs-symbol',
        'dynexp': '',
        'stalab': 'hljs-type',
        'dynlab': '',
        'dynstr': 'hljs-string',
        'stacstdec': '',
        'stacstuse': '',
        'dyncstdec': '',
        'dyncstuse': '',
        'dyncst_implement': ''
      };
      fn = function(k, v) {
        return elem.find("." + k).removeClass(k).addClass(v);
      };
      for (k in mapping) {
        v = mapping[k];
        fn(k, v);
      }
      return elem;
    },
    preview: function(id) {
      var handler, self;
      $("#" + id + " button:contains('Edit')").show();
      $("#" + id + " button:contains('Preview')").hide();
      $("#" + id + " > .preview").show();
      $("#" + id + " > .editor").hide();
      self = this;
      handler = function(data, status) {
        var html;
        data = $.parseJSON(decodeURIComponent(data));
        html = self.hljs ? self.use_hljs(data[1]) : self.fix_pre_code(data[1]);
        return $("#" + id + "-preview").html(html);
      };
      return $.post(this.api.chtml, {
        mycode: this.get_code(id),
        stadyn: 1
      }).done(handler);
    },
    show_code: function(id, code, language, append) {
      var target;
      if (append == null) {
        append = false;
      }
      if (!append) {
        this.clear();
      }
      if (this.hljs) {
        code = hljs.highlight(language, code).value;
      }
      code = this.hljs ? this.precodify(code, "hljs") : this.precodify(code);
      target = $("#" + id + "-output");
      if (append && target.html().length > 0) {
        target.append("<br>");
        return target.append(code);
      } else {
        return target.html(code);
      }
    },
    edit: function(id) {
      $("#" + id + " button:contains('Edit')").hide();
      $("#" + id + " button:contains('Preview')").show();
      $("#" + id + " > .preview").hide();
      return $("#" + id + " > .editor").show();
    },
    typecheck: function(id) {
      var handler, self;
      self = this;
      handler = function(data, status) {
        data = $.parseJSON(decodeURIComponent(data));
        console.log(status);
        return self.show_code(id, data[1], "bash");
      };
      return $.post(this.api.tc, {
        mycode: this.get_code(id),
        stadyn: 1
      }).done(handler);
    },
    compilec: function(id) {
      var handler, self;
      self = this;
      handler = function(data, status) {
        data = $.parseJSON(decodeURIComponent(data));
        if (data[0] === 0) {
          return self.show_code(id, data[1], "c");
        } else {
          return self.show_code(id, data[1], "bash");
        }
      };
      return $.post(this.api.cc, {
        mycode: this.get_code(id),
        stadyn: 1
      }).done(handler);
    },
    runjs: function(id) {
      var handler, self;
      self = this;
      handler = function(data, status) {
        var error, error1, result;
        data = $.parseJSON(decodeURIComponent(data));
        if (!data[0] === 0) {
          return self.show_code(id, data[1], "bash");
        } else {
          try {
            result = eval(data[1]);
            return self.show_code(id, result, "js");
          } catch (error1) {
            error = error1;
            return $("#" + id + "-output").html("" + error);
          } finally {
            self.show_code(id, data[1], "js", true);
          }
        }
      };
      return $.post(this.api.cjs, {
        mycode: this.get_code(id),
        stadyn: 1
      }).done(handler);
    },
    download: function(id) {
      var code;
      code = escape(this.get_code(id));
      return window.open("data:x-application/text," + code);
    },
    clear: function(id) {
      return $("#" + id + "-output").empty();
    }
  };

  window.ats_service = ats_service;

}).call(this);
